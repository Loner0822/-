/* Generated by Together */

#include <windows.h>
#include <psapi.h>
#include "TProcess.h"

TProcess::TProcess( const AnsiString & file, const AnsiString & param )
{
    m_path = file;
    m_param = param;
    m_processId = -1;
}

TProcess::~TProcess()
{
    Terminate();
}

bool TProcess::Run()
{
    PROCESS_INFORMATION   pi;
    STARTUPINFO   si;
    memset( &si,0,sizeof( STARTUPINFO ));
    si.cb = sizeof( STARTUPINFO );

    AnsiString param = "\"" + m_path + "\" " + m_param;
    bool bres = CreateProcess( 0, param.c_str(), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi );
    m_processId = pi.dwProcessId;

    return bres;
}

void TProcess::Detach()
{
    m_processId = -1;
}

bool TProcess::IsRunning()
{
    if( m_processId == -1 )
        return false;
        
    HANDLE hProcess;
    hProcess = OpenProcess( PROCESS_ALL_ACCESS, FALSE, m_processId );

    if( hProcess != NULL )
    {
        CloseHandle( hProcess );
        return true;
    }
    return false;
}

void TProcess::Terminate()
{
    if( this->IsRunning() )
    {
        TerminateProcess( OpenProcess( PROCESS_TERMINATE, FALSE, m_processId), ExitCode );
    }
}

AnsiString & TProcess::getParam()
{
    return m_param;
}

void TProcess::setParam(AnsiString & param)
{
    this->m_param = param;
}

//提升和恢复权限函数 
static int EnablePrivilege(LPCTSTR lpszPrivilegeName,BOOL bEnable) 
{ 
    HANDLE hToken; 
    TOKEN_PRIVILEGES tp;
    LUID luid; 
    if(!OpenProcessToken(GetCurrentProcess(),TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY | TOKEN_READ,&hToken)) 
        return 0;  //打开进程的令牌环 
    if(!LookupPrivilegeValue(NULL, lpszPrivilegeName, &luid)) 
        return 1;  //修改进程权限 
    tp.PrivilegeCount = 1;  //赋给本进程特权 
    tp.Privileges[0].Luid = luid; 
    tp.Privileges[0].Attributes = (bEnable) ? SE_PRIVILEGE_ENABLED : 0; 
    AdjustTokenPrivileges(hToken,FALSE,&tp,NULL,NULL,NULL); 
    //通知Windows修改本进程的权限 
    CloseHandle(hToken);
    return 0; 
} 

void TProcess::KillTask(const char *processName) 
{ 
    char *fengze; 
    DWORD processid[1024],needed,processcount,io; 
    HANDLE hProcess;
	HMODULE hModule; 
	char path[MAX_PATH] = "",temp[256];  //定义变量 

	EnablePrivilege(SE_DEBUG_NAME,TRUE);  //提升权限 
    EnumProcesses(processid, sizeof(processid), &needed);  //枚举所有进程 
    processcount=needed/sizeof(DWORD);   //计算进程数量 
    for (io=0;io<processcount;io++)  //遍历所有进程 
    {   
        hProcess=OpenProcess(PROCESS_QUERY_INFORMATION |PROCESS_TERMINATE |PROCESS_VM_READ|PROCESS_VM_WRITE,false,processid[io]); 
        //打开进程并获得进程句柄 
        if (hProcess) 
        { 
            EnumProcessModules(hProcess, &hModule, sizeof(hModule), &needed); 
            // 枚举打开进程的模块 
            GetModuleFileNameEx(hProcess, hModule, path, sizeof(path)); 
            // 获取模块文件名（包含路径） 
///            GetShortPathName(path,path,256); 
            //将长文件名转换成短文件名 
            itoa(processid[io],temp,10);   //转换为字符串 
            if((fengze=strstr(path,processName))) 
			//在进程路径中查找是否含有相关字符 
            { 
                TerminateProcess(hProcess,0);  //如果有就结束进程 
            } 
            else 
                CloseHandle(hProcess); //关闭打开的进程             
        } 
    } 
    EnablePrivilege(SE_DEBUG_NAME,FALSE); //恢复权限 
} 

